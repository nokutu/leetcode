import time

class Solution:
    def longestValidParentheses(self, text: str) -> int:
        cache = {}

        best = [0]

        def f(i: int, j: int):
            if (i, j) in cache:
                return cache[(i, j)]
            # Exit condition
            if i >= j or j - i + 1 < best[0]:
                return 0

            if (j - i + 1) % 2 != 0:
                ret = max(f(i + 1, j), f(i, j - 1))
            else:
                left_count = text[i:j + 1].count('(')
                right_count = text[i:j + 1].count(')')
                if text[i] == ')' and text[j] == '(':
                    ret = f(i + 1, j - 1)
                elif text[i] == ')':
                    ret = max(f(i + 2, j), f(i + 1, j - 1))
                elif text[j] == '(':
                    ret = max(f(i, j - 2), f(i + 1, j - 1))
                elif left_count != right_count:
                    ret = max(f(i + 2, j), f(i, j - 2), f(i + 1, j - 1))
                else:
                    if isValid(i, j):
                        ret = j - i + 1
                    else:
                        ret = max(f(i + 2, j), f(i, j - 2), f(i + 1, j - 1))

            if ret > best[0]:
                best[0] = ret
            cache[(i, j)] = ret
            return ret

        def isValid(i: int, j: int) -> bool:
            level = 0
            for c in text[i:j + 1]:
                if c == '(':
                    level += 1
                elif c == ')':
                    level -= 1
                    if level < 0:
                        return False
            return level == 0

        return f(0, len(text) - 1)


start = time.time()
print(Solution().longestValidParentheses("())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())("))
end = time.time()
print(end - start)
